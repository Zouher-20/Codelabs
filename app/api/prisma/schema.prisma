// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  USER
  ADMIN
}

enum DIFFICULTTYPE {
  easy
  difficult
  Medium
}

enum NAMEPLAN {
  labs
  classes
  studentsInClass
  labsInClass
  challenge
}

enum PLANTYPE {
  free
  plus
  custom
  premium
}

enum TAGTYPE {
  challenge
  normal
  class
}

model User {
  id                     String                   @id @default(cuid())
  email                  String                   @unique
  username               String                   @unique
  password               String
  role                   ROLE
  typeUser               String?
  userImage              String?
  planEndDate            DateTime?
  inActive               Boolean                  @default(false)
  verifiedAt             DateTime?
  Feedback               Feedback?
  EditorConfig           EditorConfig?
  ChallengeParticipation ChallengeParticipation[]
  UserProject            UserProject[]
  Star                   Star[]
  Comment                Comment[]
  Blog                   Blog[]
  MemberClass            MemberClass[]
  Verified               Verified?
  PlanSubscription       PlanSubscription?
}

model Verified {
  id     String  @id @default(cuid())
  email  String  @unique
  otp    Int
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model Feedback {
  id       String  @id @default(cuid())
  Feedback String?
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id])
}

model EditorConfig {
  id     String  @id @default(cuid())
  config String?
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id])
}

model Plan {
  id               String            @id @default(cuid())
  type             String?
  price            String?
  duration         DateTime?
  FeaturePlan      FeaturePlan[]
  PlanSubscription PlanSubscription?
}

model FeaturePlan {
  id     Int      @id @default(autoincrement())
  name   NAMEPLAN
  value  Int
  plan   Plan     @relation(fields: [planId], references: [id])
  planId String
}

model ClassProject {
  id             String           @id @default(cuid())
  name           String
  type           String
  descraption    String
  Lab            Lab[]
  createdAt      DateTime         @default(now())
  classRomId     String
  classRom       ClassRom         @relation(fields: [classRomId], references: [id])
  FeedbackProjct FeedbackProjct[]
  broketag       broketag[]
}

model PlanSubscription {
  id String @id @default(cuid())

  userId String @unique
  planId String @unique
  user   User   @relation(fields: [userId], references: [id])
  plan   Plan   @relation(fields: [planId], references: [id])
}

model ClassRom {
  id           String         @id @default(cuid())
  ClassProject ClassProject[]
  MemberClass  MemberClass[]
}

model Tag {
  id       String     @id @default(cuid())
  tagename String     @unique
  tagtype  TAGTYPE?
  broketag broketag[]
}

model broketag {
  id            String       @id @default(cuid())
  tagId         String
  tag           Tag          @relation(fields: [tagId], references: [id])
  userprojectId String
  userproject   UserProject  @relation(fields: [userprojectId], references: [id])
  challengeId   String
  challenge     Challenge    @relation(fields: [challengeId], references: [id])
  classId       String
  class         ClassProject @relation(fields: [classId], references: [id])
  blogId        String
  blog          Blog         @relation(fields: [blogId], references: [id])
}

model Challenge {
  id                     String                   @id @default(cuid())
  name                   String
  duration               DateTime?
  isComplete             Boolean
  difficulty             DIFFICULTTYPE
  type                   String
  description            String
  endAt                  DateTime
  startedAt              DateTime
  createdAt              DateTime                 @default(now())
  ChallengeParticipation ChallengeParticipation[]
  Attachment             Attachment[]
  broketag               broketag[]
}

model Attachment {
  id          Int       @id @default(autoincrement())
  challengeId String
  path        String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
}

model ChallengeParticipation {
  id          String    @id @default(cuid())
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  challengeId String
  userId      String
  Lab         Lab[]
}

model Lab {
  id                       String                 @id @default(cuid())
  tamblateId               Int                    @unique
  tamblate                 Tamblate               @relation(fields: [tamblateId], references: [id])
  jsonFile                 String
  userprojectId            String
  classProjectId           String
  challengeParticipationId String
  challengeParticipation   ChallengeParticipation @relation(fields: [challengeParticipationId], references: [id])
  classProject             ClassProject           @relation(fields: [classProjectId], references: [id])
  userproject              UserProject            @relation(fields: [userprojectId], references: [id])
}

model UserProject {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  type        String
  name        String?
  description String?
  Star        Star[]
  Comment     Comment[]
  Lab         Lab[]
  broketag    broketag[]
}

model Tamblate {
  id            Int    @id @default(autoincrement())
  nameTemplate  String
  imageTemplate String
  Lab           Lab?
}

model Blog {
  id       String     @id @default(cuid())
  userId   String
  user     User       @relation(fields: [userId], references: [id])
  contant  String?
  imageUrl String?
  status   Boolean    @default(false)
  title    String?
  Star     Star[]
  Comment  Comment[]
  broketag broketag[]
}

//TODOoooooooooooooooooooo
model Star {
  id            String      @id @default(cuid())
  userId        String
  userprojectId String
  blogId        String
  blog          Blog        @relation(fields: [blogId], references: [id])
  userproject   UserProject @relation(fields: [userprojectId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model Comment {
  id            String      @id @default(cuid())
  comment       String
  userId        String
  userprojectId String
  blogId        String
  blog          Blog        @relation(fields: [blogId], references: [id])
  userproject   UserProject @relation(fields: [userprojectId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

//TODOoooooooooooooooooooo

model MemberClass {
  id             String           @id @default(cuid())
  classRomId     String
  classRom       ClassRom         @relation(fields: [classRomId], references: [id])
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  FeedbackProjct FeedbackProjct[]
}

model FeedbackProjct {
  id             String       @id @default(cuid())
  classProjectId String
  classProject   ClassProject @relation(fields: [classProjectId], references: [id])
  memberClassId  String
  memberClass    MemberClass  @relation(fields: [memberClassId], references: [id])
}
